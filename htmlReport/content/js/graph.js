/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45458.0, "minX": 0.0, "maxY": 310296.0, "series": [{"data": [[0.0, 45458.0], [0.1, 45458.0], [0.2, 45458.0], [0.3, 51854.0], [0.4, 51854.0], [0.5, 55972.0], [0.6, 55972.0], [0.7, 56414.0], [0.8, 56414.0], [0.9, 58776.0], [1.0, 58776.0], [1.1, 58776.0], [1.2, 61031.0], [1.3, 61031.0], [1.4, 61649.0], [1.5, 61649.0], [1.6, 62438.0], [1.7, 62438.0], [1.8, 63150.0], [1.9, 63150.0], [2.0, 63150.0], [2.1, 63371.0], [2.2, 63371.0], [2.3, 64283.0], [2.4, 64283.0], [2.5, 65483.0], [2.6, 65483.0], [2.7, 65657.0], [2.8, 65657.0], [2.9, 65706.0], [3.0, 65706.0], [3.1, 65706.0], [3.2, 65948.0], [3.3, 65948.0], [3.4, 66917.0], [3.5, 66917.0], [3.6, 67333.0], [3.7, 67333.0], [3.8, 67540.0], [3.9, 67540.0], [4.0, 67540.0], [4.1, 67688.0], [4.2, 67688.0], [4.3, 69457.0], [4.4, 69457.0], [4.5, 69483.0], [4.6, 69483.0], [4.7, 69824.0], [4.8, 69824.0], [4.9, 69978.0], [5.0, 69978.0], [5.1, 69978.0], [5.2, 70198.0], [5.3, 70198.0], [5.4, 70347.0], [5.5, 70347.0], [5.6, 70376.0], [5.7, 70376.0], [5.8, 71564.0], [5.9, 71564.0], [6.0, 71564.0], [6.1, 71705.0], [6.2, 71705.0], [6.3, 72252.0], [6.4, 72252.0], [6.5, 73481.0], [6.6, 73481.0], [6.7, 73637.0], [6.8, 73637.0], [6.9, 73906.0], [7.0, 73906.0], [7.1, 73906.0], [7.2, 74277.0], [7.3, 74277.0], [7.4, 74298.0], [7.5, 74298.0], [7.6, 74363.0], [7.7, 74363.0], [7.8, 74410.0], [7.9, 74410.0], [8.0, 74410.0], [8.1, 74558.0], [8.2, 74558.0], [8.3, 74767.0], [8.4, 74767.0], [8.5, 75078.0], [8.6, 75078.0], [8.7, 75090.0], [8.8, 75090.0], [8.9, 75172.0], [9.0, 75172.0], [9.1, 75172.0], [9.2, 75233.0], [9.3, 75233.0], [9.4, 75345.0], [9.5, 75345.0], [9.6, 75351.0], [9.7, 75351.0], [9.8, 75861.0], [9.9, 75861.0], [10.0, 75976.0], [10.1, 75976.0], [10.2, 75976.0], [10.3, 75996.0], [10.4, 75996.0], [10.5, 76012.0], [10.6, 76012.0], [10.7, 76263.0], [10.8, 76263.0], [10.9, 76395.0], [11.0, 76395.0], [11.1, 76395.0], [11.2, 76423.0], [11.3, 76423.0], [11.4, 76500.0], [11.5, 76500.0], [11.6, 76821.0], [11.7, 76821.0], [11.8, 77004.0], [11.9, 77004.0], [12.0, 77204.0], [12.1, 77204.0], [12.2, 77204.0], [12.3, 78896.0], [12.4, 78896.0], [12.5, 78973.0], [12.6, 78973.0], [12.7, 79017.0], [12.8, 79017.0], [12.9, 79709.0], [13.0, 79709.0], [13.1, 79709.0], [13.2, 80864.0], [13.3, 80864.0], [13.4, 80868.0], [13.5, 80868.0], [13.6, 81271.0], [13.7, 81271.0], [13.8, 82770.0], [13.9, 82770.0], [14.0, 83281.0], [14.1, 83281.0], [14.2, 83281.0], [14.3, 83743.0], [14.4, 83743.0], [14.5, 84307.0], [14.6, 84307.0], [14.7, 84607.0], [14.8, 84607.0], [14.9, 84639.0], [15.0, 84639.0], [15.1, 84639.0], [15.2, 84758.0], [15.3, 84758.0], [15.4, 84937.0], [15.5, 84937.0], [15.6, 85029.0], [15.7, 85029.0], [15.8, 85488.0], [15.9, 85488.0], [16.0, 87454.0], [16.1, 87454.0], [16.2, 87454.0], [16.3, 87580.0], [16.4, 87580.0], [16.5, 87719.0], [16.6, 87719.0], [16.7, 87859.0], [16.8, 87859.0], [16.9, 88089.0], [17.0, 88089.0], [17.1, 88089.0], [17.2, 88439.0], [17.3, 88439.0], [17.4, 88439.0], [17.5, 88439.0], [17.6, 88531.0], [17.7, 88531.0], [17.8, 88767.0], [17.9, 88767.0], [18.0, 88903.0], [18.1, 88903.0], [18.2, 88903.0], [18.3, 88905.0], [18.4, 88905.0], [18.5, 89032.0], [18.6, 89032.0], [18.7, 89374.0], [18.8, 89374.0], [18.9, 89491.0], [19.0, 89491.0], [19.1, 89491.0], [19.2, 90080.0], [19.3, 90080.0], [19.4, 90923.0], [19.5, 90923.0], [19.6, 91240.0], [19.7, 91240.0], [19.8, 91279.0], [19.9, 91279.0], [20.0, 91349.0], [20.1, 91349.0], [20.2, 91349.0], [20.3, 91641.0], [20.4, 91641.0], [20.5, 91744.0], [20.6, 91744.0], [20.7, 91840.0], [20.8, 91840.0], [20.9, 91923.0], [21.0, 91923.0], [21.1, 91923.0], [21.2, 92192.0], [21.3, 92192.0], [21.4, 92276.0], [21.5, 92276.0], [21.6, 93061.0], [21.7, 93061.0], [21.8, 93629.0], [21.9, 93629.0], [22.0, 93642.0], [22.1, 93642.0], [22.2, 93642.0], [22.3, 93927.0], [22.4, 93927.0], [22.5, 94170.0], [22.6, 94170.0], [22.7, 94184.0], [22.8, 94184.0], [22.9, 94782.0], [23.0, 94782.0], [23.1, 94782.0], [23.2, 94884.0], [23.3, 94884.0], [23.4, 95087.0], [23.5, 95087.0], [23.6, 95417.0], [23.7, 95417.0], [23.8, 95755.0], [23.9, 95755.0], [24.0, 95926.0], [24.1, 95926.0], [24.2, 95926.0], [24.3, 96024.0], [24.4, 96024.0], [24.5, 96048.0], [24.6, 96048.0], [24.7, 96329.0], [24.8, 96329.0], [24.9, 96705.0], [25.0, 96705.0], [25.1, 96705.0], [25.2, 96734.0], [25.3, 96734.0], [25.4, 96839.0], [25.5, 96839.0], [25.6, 96927.0], [25.7, 96927.0], [25.8, 97340.0], [25.9, 97340.0], [26.0, 98023.0], [26.1, 98023.0], [26.2, 98023.0], [26.3, 98115.0], [26.4, 98115.0], [26.5, 98407.0], [26.6, 98407.0], [26.7, 98867.0], [26.8, 98867.0], [26.9, 98912.0], [27.0, 98912.0], [27.1, 98912.0], [27.2, 99055.0], [27.3, 99055.0], [27.4, 99252.0], [27.5, 99252.0], [27.6, 100192.0], [27.7, 100192.0], [27.8, 100412.0], [27.9, 100412.0], [28.0, 100429.0], [28.1, 100429.0], [28.2, 100429.0], [28.3, 100532.0], [28.4, 100532.0], [28.5, 100696.0], [28.6, 100696.0], [28.7, 100715.0], [28.8, 100715.0], [28.9, 101036.0], [29.0, 101036.0], [29.1, 101036.0], [29.2, 101126.0], [29.3, 101126.0], [29.4, 101238.0], [29.5, 101238.0], [29.6, 101296.0], [29.7, 101296.0], [29.8, 101312.0], [29.9, 101312.0], [30.0, 101321.0], [30.1, 101321.0], [30.2, 101321.0], [30.3, 101523.0], [30.4, 101523.0], [30.5, 101751.0], [30.6, 101751.0], [30.7, 101873.0], [30.8, 101873.0], [30.9, 101878.0], [31.0, 101878.0], [31.1, 101878.0], [31.2, 101924.0], [31.3, 101924.0], [31.4, 101990.0], [31.5, 101990.0], [31.6, 102206.0], [31.7, 102206.0], [31.8, 102366.0], [31.9, 102366.0], [32.0, 102624.0], [32.1, 102624.0], [32.2, 102624.0], [32.3, 102674.0], [32.4, 102674.0], [32.5, 102769.0], [32.6, 102769.0], [32.7, 102779.0], [32.8, 102779.0], [32.9, 102916.0], [33.0, 102916.0], [33.1, 102916.0], [33.2, 102971.0], [33.3, 102971.0], [33.4, 103151.0], [33.5, 103151.0], [33.6, 103282.0], [33.7, 103282.0], [33.8, 103472.0], [33.9, 103472.0], [34.0, 103529.0], [34.1, 103529.0], [34.2, 103529.0], [34.3, 103895.0], [34.4, 103895.0], [34.5, 104092.0], [34.6, 104092.0], [34.7, 104323.0], [34.8, 104323.0], [34.9, 104455.0], [35.0, 104455.0], [35.1, 104455.0], [35.2, 104520.0], [35.3, 104520.0], [35.4, 104533.0], [35.5, 104533.0], [35.6, 104556.0], [35.7, 104556.0], [35.8, 104837.0], [35.9, 104837.0], [36.0, 104910.0], [36.1, 104910.0], [36.2, 104910.0], [36.3, 104957.0], [36.4, 104957.0], [36.5, 104998.0], [36.6, 104998.0], [36.7, 105123.0], [36.8, 105123.0], [36.9, 105385.0], [37.0, 105385.0], [37.1, 105385.0], [37.2, 105400.0], [37.3, 105400.0], [37.4, 105422.0], [37.5, 105422.0], [37.6, 105549.0], [37.7, 105549.0], [37.8, 105559.0], [37.9, 105559.0], [38.0, 105581.0], [38.1, 105581.0], [38.2, 105581.0], [38.3, 105715.0], [38.4, 105715.0], [38.5, 105896.0], [38.6, 105896.0], [38.7, 106037.0], [38.8, 106037.0], [38.9, 106059.0], [39.0, 106059.0], [39.1, 106059.0], [39.2, 106420.0], [39.3, 106420.0], [39.4, 106481.0], [39.5, 106481.0], [39.6, 106911.0], [39.7, 106911.0], [39.8, 106914.0], [39.9, 106914.0], [40.0, 107065.0], [40.1, 107065.0], [40.2, 107065.0], [40.3, 107149.0], [40.4, 107149.0], [40.5, 107284.0], [40.6, 107284.0], [40.7, 107740.0], [40.8, 107740.0], [40.9, 107756.0], [41.0, 107756.0], [41.1, 107756.0], [41.2, 107855.0], [41.3, 107855.0], [41.4, 107857.0], [41.5, 107857.0], [41.6, 108122.0], [41.7, 108122.0], [41.8, 108344.0], [41.9, 108344.0], [42.0, 108523.0], [42.1, 108523.0], [42.2, 108523.0], [42.3, 108589.0], [42.4, 108589.0], [42.5, 108632.0], [42.6, 108632.0], [42.7, 108653.0], [42.8, 108653.0], [42.9, 108820.0], [43.0, 108820.0], [43.1, 108820.0], [43.2, 108904.0], [43.3, 108904.0], [43.4, 108942.0], [43.5, 108942.0], [43.6, 109185.0], [43.7, 109185.0], [43.8, 109381.0], [43.9, 109381.0], [44.0, 109391.0], [44.1, 109391.0], [44.2, 109391.0], [44.3, 109452.0], [44.4, 109452.0], [44.5, 109492.0], [44.6, 109492.0], [44.7, 109640.0], [44.8, 109640.0], [44.9, 109778.0], [45.0, 109778.0], [45.1, 109778.0], [45.2, 110006.0], [45.3, 110006.0], [45.4, 110123.0], [45.5, 110123.0], [45.6, 110521.0], [45.7, 110521.0], [45.8, 110611.0], [45.9, 110611.0], [46.0, 110669.0], [46.1, 110669.0], [46.2, 110669.0], [46.3, 110703.0], [46.4, 110703.0], [46.5, 110783.0], [46.6, 110783.0], [46.7, 111014.0], [46.8, 111014.0], [46.9, 111076.0], [47.0, 111076.0], [47.1, 111076.0], [47.2, 111149.0], [47.3, 111149.0], [47.4, 111157.0], [47.5, 111157.0], [47.6, 111394.0], [47.7, 111394.0], [47.8, 111452.0], [47.9, 111452.0], [48.0, 111459.0], [48.1, 111459.0], [48.2, 111459.0], [48.3, 111510.0], [48.4, 111510.0], [48.5, 111587.0], [48.6, 111587.0], [48.7, 111656.0], [48.8, 111656.0], [48.9, 111677.0], [49.0, 111677.0], [49.1, 111677.0], [49.2, 111835.0], [49.3, 111835.0], [49.4, 111852.0], [49.5, 111852.0], [49.6, 112065.0], [49.7, 112065.0], [49.8, 112086.0], [49.9, 112086.0], [50.0, 112127.0], [50.1, 112127.0], [50.2, 112127.0], [50.3, 112447.0], [50.4, 112447.0], [50.5, 112513.0], [50.6, 112513.0], [50.7, 112601.0], [50.8, 112601.0], [50.9, 112605.0], [51.0, 112605.0], [51.1, 112605.0], [51.2, 112616.0], [51.3, 112616.0], [51.4, 112666.0], [51.5, 112666.0], [51.6, 112728.0], [51.7, 112728.0], [51.8, 112882.0], [51.9, 112882.0], [52.0, 112998.0], [52.1, 112998.0], [52.2, 112998.0], [52.3, 113185.0], [52.4, 113185.0], [52.5, 113446.0], [52.6, 113446.0], [52.7, 113727.0], [52.8, 113727.0], [52.9, 113741.0], [53.0, 113741.0], [53.1, 113741.0], [53.2, 114145.0], [53.3, 114145.0], [53.4, 114154.0], [53.5, 114154.0], [53.6, 114551.0], [53.7, 114551.0], [53.8, 114749.0], [53.9, 114749.0], [54.0, 114782.0], [54.1, 114782.0], [54.2, 114782.0], [54.3, 114847.0], [54.4, 114847.0], [54.5, 114905.0], [54.6, 114905.0], [54.7, 115012.0], [54.8, 115012.0], [54.9, 115020.0], [55.0, 115020.0], [55.1, 115020.0], [55.2, 115336.0], [55.3, 115336.0], [55.4, 115552.0], [55.5, 115552.0], [55.6, 115764.0], [55.7, 115764.0], [55.8, 115780.0], [55.9, 115780.0], [56.0, 115931.0], [56.1, 115931.0], [56.2, 115931.0], [56.3, 116080.0], [56.4, 116080.0], [56.5, 116216.0], [56.6, 116216.0], [56.7, 116483.0], [56.8, 116483.0], [56.9, 116588.0], [57.0, 116588.0], [57.1, 116588.0], [57.2, 116610.0], [57.3, 116610.0], [57.4, 116832.0], [57.5, 116832.0], [57.6, 117116.0], [57.7, 117116.0], [57.8, 117776.0], [57.9, 117776.0], [58.0, 117984.0], [58.1, 117984.0], [58.2, 117984.0], [58.3, 118088.0], [58.4, 118088.0], [58.5, 118159.0], [58.6, 118159.0], [58.7, 118182.0], [58.8, 118182.0], [58.9, 118675.0], [59.0, 118675.0], [59.1, 118675.0], [59.2, 118732.0], [59.3, 118732.0], [59.4, 118752.0], [59.5, 118752.0], [59.6, 119093.0], [59.7, 119093.0], [59.8, 119172.0], [59.9, 119172.0], [60.0, 119187.0], [60.1, 119187.0], [60.2, 119187.0], [60.3, 119476.0], [60.4, 119476.0], [60.5, 119540.0], [60.6, 119540.0], [60.7, 119602.0], [60.8, 119602.0], [60.9, 119732.0], [61.0, 119732.0], [61.1, 119732.0], [61.2, 119736.0], [61.3, 119736.0], [61.4, 119904.0], [61.5, 119904.0], [61.6, 119979.0], [61.7, 119979.0], [61.8, 120004.0], [61.9, 120004.0], [62.0, 120193.0], [62.1, 120193.0], [62.2, 120193.0], [62.3, 120428.0], [62.4, 120428.0], [62.5, 120441.0], [62.6, 120441.0], [62.7, 120528.0], [62.8, 120528.0], [62.9, 120762.0], [63.0, 120762.0], [63.1, 120762.0], [63.2, 120877.0], [63.3, 120877.0], [63.4, 120882.0], [63.5, 120882.0], [63.6, 120953.0], [63.7, 120953.0], [63.8, 121144.0], [63.9, 121144.0], [64.0, 121184.0], [64.1, 121184.0], [64.2, 121184.0], [64.3, 121387.0], [64.4, 121387.0], [64.5, 121431.0], [64.6, 121431.0], [64.7, 121659.0], [64.8, 121659.0], [64.9, 121710.0], [65.0, 121710.0], [65.1, 121710.0], [65.2, 121794.0], [65.3, 121794.0], [65.4, 121819.0], [65.5, 121819.0], [65.6, 121935.0], [65.7, 121935.0], [65.8, 122027.0], [65.9, 122027.0], [66.0, 122106.0], [66.1, 122106.0], [66.2, 122106.0], [66.3, 122392.0], [66.4, 122392.0], [66.5, 122732.0], [66.6, 122732.0], [66.7, 122853.0], [66.8, 122853.0], [66.9, 122880.0], [67.0, 122880.0], [67.1, 122880.0], [67.2, 122986.0], [67.3, 122986.0], [67.4, 123201.0], [67.5, 123201.0], [67.6, 123349.0], [67.7, 123349.0], [67.8, 123351.0], [67.9, 123351.0], [68.0, 123458.0], [68.1, 123458.0], [68.2, 123458.0], [68.3, 123494.0], [68.4, 123494.0], [68.5, 123518.0], [68.6, 123518.0], [68.7, 123661.0], [68.8, 123661.0], [68.9, 123831.0], [69.0, 123831.0], [69.1, 123831.0], [69.2, 123860.0], [69.3, 123860.0], [69.4, 124200.0], [69.5, 124200.0], [69.6, 124224.0], [69.7, 124224.0], [69.8, 124277.0], [69.9, 124277.0], [70.0, 124290.0], [70.1, 124290.0], [70.2, 124290.0], [70.3, 124493.0], [70.4, 124493.0], [70.5, 124591.0], [70.6, 124591.0], [70.7, 124667.0], [70.8, 124667.0], [70.9, 125009.0], [71.0, 125009.0], [71.1, 125009.0], [71.2, 125070.0], [71.3, 125070.0], [71.4, 125350.0], [71.5, 125350.0], [71.6, 125839.0], [71.7, 125839.0], [71.8, 125852.0], [71.9, 125852.0], [72.0, 125852.0], [72.1, 126024.0], [72.2, 126024.0], [72.3, 126345.0], [72.4, 126345.0], [72.5, 126489.0], [72.6, 126489.0], [72.7, 126775.0], [72.8, 126775.0], [72.9, 127064.0], [73.0, 127064.0], [73.1, 127064.0], [73.2, 127276.0], [73.3, 127276.0], [73.4, 127660.0], [73.5, 127660.0], [73.6, 127763.0], [73.7, 127763.0], [73.8, 127963.0], [73.9, 127963.0], [74.0, 127963.0], [74.1, 127974.0], [74.2, 127974.0], [74.3, 128077.0], [74.4, 128077.0], [74.5, 128185.0], [74.6, 128185.0], [74.7, 128556.0], [74.8, 128556.0], [74.9, 128578.0], [75.0, 128578.0], [75.1, 128578.0], [75.2, 128705.0], [75.3, 128705.0], [75.4, 129017.0], [75.5, 129017.0], [75.6, 129102.0], [75.7, 129102.0], [75.8, 129216.0], [75.9, 129216.0], [76.0, 129216.0], [76.1, 129239.0], [76.2, 129239.0], [76.3, 129248.0], [76.4, 129248.0], [76.5, 129284.0], [76.6, 129284.0], [76.7, 129424.0], [76.8, 129424.0], [76.9, 129633.0], [77.0, 129633.0], [77.1, 129633.0], [77.2, 129779.0], [77.3, 129779.0], [77.4, 129800.0], [77.5, 129800.0], [77.6, 129834.0], [77.7, 129834.0], [77.8, 129994.0], [77.9, 129994.0], [78.0, 129994.0], [78.1, 130027.0], [78.2, 130027.0], [78.3, 130300.0], [78.4, 130300.0], [78.5, 130538.0], [78.6, 130538.0], [78.7, 130593.0], [78.8, 130593.0], [78.9, 131457.0], [79.0, 131457.0], [79.1, 131457.0], [79.2, 131863.0], [79.3, 131863.0], [79.4, 132033.0], [79.5, 132033.0], [79.6, 132163.0], [79.7, 132163.0], [79.8, 132283.0], [79.9, 132283.0], [80.0, 132283.0], [80.1, 132327.0], [80.2, 132327.0], [80.3, 132746.0], [80.4, 132746.0], [80.5, 132895.0], [80.6, 132895.0], [80.7, 133055.0], [80.8, 133055.0], [80.9, 133353.0], [81.0, 133353.0], [81.1, 133353.0], [81.2, 133498.0], [81.3, 133498.0], [81.4, 133837.0], [81.5, 133837.0], [81.6, 134350.0], [81.7, 134350.0], [81.8, 134537.0], [81.9, 134537.0], [82.0, 134537.0], [82.1, 134615.0], [82.2, 134615.0], [82.3, 134709.0], [82.4, 134709.0], [82.5, 134911.0], [82.6, 134911.0], [82.7, 135288.0], [82.8, 135288.0], [82.9, 135368.0], [83.0, 135368.0], [83.1, 135368.0], [83.2, 135398.0], [83.3, 135398.0], [83.4, 135471.0], [83.5, 135471.0], [83.6, 136806.0], [83.7, 136806.0], [83.8, 136837.0], [83.9, 136837.0], [84.0, 136837.0], [84.1, 137060.0], [84.2, 137060.0], [84.3, 137306.0], [84.4, 137306.0], [84.5, 137419.0], [84.6, 137419.0], [84.7, 137445.0], [84.8, 137445.0], [84.9, 137552.0], [85.0, 137552.0], [85.1, 137552.0], [85.2, 137732.0], [85.3, 137732.0], [85.4, 137796.0], [85.5, 137796.0], [85.6, 137799.0], [85.7, 137799.0], [85.8, 137809.0], [85.9, 137809.0], [86.0, 137809.0], [86.1, 137872.0], [86.2, 137872.0], [86.3, 137984.0], [86.4, 137984.0], [86.5, 138657.0], [86.6, 138657.0], [86.7, 138739.0], [86.8, 138739.0], [86.9, 138823.0], [87.0, 138823.0], [87.1, 138823.0], [87.2, 139189.0], [87.3, 139189.0], [87.4, 139251.0], [87.5, 139251.0], [87.6, 139412.0], [87.7, 139412.0], [87.8, 139513.0], [87.9, 139513.0], [88.0, 139513.0], [88.1, 139525.0], [88.2, 139525.0], [88.3, 139632.0], [88.4, 139632.0], [88.5, 139707.0], [88.6, 139707.0], [88.7, 139885.0], [88.8, 139885.0], [88.9, 139929.0], [89.0, 139929.0], [89.1, 139929.0], [89.2, 139958.0], [89.3, 139958.0], [89.4, 139976.0], [89.5, 139976.0], [89.6, 140108.0], [89.7, 140108.0], [89.8, 140307.0], [89.9, 140307.0], [90.0, 140307.0], [90.1, 140341.0], [90.2, 140341.0], [90.3, 140415.0], [90.4, 140415.0], [90.5, 140421.0], [90.6, 140421.0], [90.7, 140630.0], [90.8, 140630.0], [90.9, 140702.0], [91.0, 140702.0], [91.1, 140702.0], [91.2, 141498.0], [91.3, 141498.0], [91.4, 141612.0], [91.5, 141612.0], [91.6, 141619.0], [91.7, 141619.0], [91.8, 141651.0], [91.9, 141651.0], [92.0, 141651.0], [92.1, 142033.0], [92.2, 142033.0], [92.3, 142069.0], [92.4, 142069.0], [92.5, 142474.0], [92.6, 142474.0], [92.7, 143072.0], [92.8, 143072.0], [92.9, 143300.0], [93.0, 143300.0], [93.1, 143300.0], [93.2, 143480.0], [93.3, 143480.0], [93.4, 143676.0], [93.5, 143676.0], [93.6, 143850.0], [93.7, 143850.0], [93.8, 144166.0], [93.9, 144166.0], [94.0, 144166.0], [94.1, 144187.0], [94.2, 144187.0], [94.3, 144349.0], [94.4, 144349.0], [94.5, 144557.0], [94.6, 144557.0], [94.7, 144962.0], [94.8, 144962.0], [94.9, 144991.0], [95.0, 144991.0], [95.1, 144991.0], [95.2, 146580.0], [95.3, 146580.0], [95.4, 147319.0], [95.5, 147319.0], [95.6, 147475.0], [95.7, 147475.0], [95.8, 148382.0], [95.9, 148382.0], [96.0, 148382.0], [96.1, 150831.0], [96.2, 150831.0], [96.3, 153456.0], [96.4, 153456.0], [96.5, 157418.0], [96.6, 157418.0], [96.7, 159055.0], [96.8, 159055.0], [96.9, 160550.0], [97.0, 160550.0], [97.1, 160550.0], [97.2, 161461.0], [97.3, 161461.0], [97.4, 162911.0], [97.5, 162911.0], [97.6, 170024.0], [97.7, 170024.0], [97.8, 179660.0], [97.9, 179660.0], [98.0, 179660.0], [98.1, 180955.0], [98.2, 180955.0], [98.3, 184291.0], [98.4, 184291.0], [98.5, 197971.0], [98.6, 197971.0], [98.7, 201372.0], [98.8, 201372.0], [98.9, 202140.0], [99.0, 202140.0], [99.1, 202140.0], [99.2, 205081.0], [99.3, 205081.0], [99.4, 236948.0], [99.5, 236948.0], [99.6, 258521.0], [99.7, 258521.0], [99.8, 310296.0], [99.9, 310296.0], [100.0, 310296.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 45400.0, "maxY": 4.0, "series": [{"data": [[136800.0, 2.0], [135200.0, 1.0], [132000.0, 1.0], [141600.0, 3.0], [134500.0, 1.0], [137700.0, 3.0], [144100.0, 2.0], [147300.0, 1.0], [180900.0, 1.0], [236900.0, 1.0], [65900.0, 1.0], [67500.0, 1.0], [69900.0, 1.0], [71500.0, 1.0], [74700.0, 1.0], [73900.0, 1.0], [76300.0, 1.0], [84300.0, 1.0], [82700.0, 1.0], [87500.0, 1.0], [93900.0, 1.0], [94700.0, 1.0], [96300.0, 1.0], [101900.0, 2.0], [101100.0, 1.0], [103500.0, 1.0], [105100.0, 1.0], [104300.0, 1.0], [102700.0, 2.0], [109100.0, 1.0], [108300.0, 1.0], [111500.0, 2.0], [110700.0, 2.0], [113100.0, 1.0], [117900.0, 1.0], [115500.0, 1.0], [114700.0, 2.0], [117100.0, 1.0], [118700.0, 2.0], [121100.0, 2.0], [122700.0, 1.0], [119500.0, 1.0], [121900.0, 1.0], [123500.0, 1.0], [126700.0, 1.0], [129900.0, 1.0], [129100.0, 1.0], [132200.0, 1.0], [133800.0, 1.0], [135400.0, 1.0], [138600.0, 1.0], [137000.0, 1.0], [143400.0, 1.0], [137900.0, 1.0], [134700.0, 1.0], [139500.0, 2.0], [144300.0, 1.0], [63300.0, 1.0], [72200.0, 1.0], [69800.0, 1.0], [77000.0, 1.0], [76200.0, 1.0], [85000.0, 1.0], [87400.0, 1.0], [89000.0, 1.0], [92200.0, 1.0], [93000.0, 1.0], [95400.0, 1.0], [101800.0, 2.0], [101000.0, 1.0], [102600.0, 2.0], [103400.0, 1.0], [105800.0, 1.0], [111400.0, 2.0], [110600.0, 2.0], [116200.0, 1.0], [118600.0, 1.0], [119400.0, 1.0], [121800.0, 1.0], [125800.0, 2.0], [123400.0, 2.0], [124200.0, 4.0], [125000.0, 2.0], [129000.0, 1.0], [129800.0, 2.0], [138800.0, 1.0], [142000.0, 2.0], [143600.0, 1.0], [140400.0, 2.0], [133300.0, 1.0], [134900.0, 1.0], [139700.0, 1.0], [144500.0, 1.0], [160500.0, 1.0], [202100.0, 1.0], [65700.0, 1.0], [67300.0, 1.0], [74500.0, 1.0], [75300.0, 2.0], [84900.0, 1.0], [88900.0, 2.0], [92100.0, 1.0], [91300.0, 1.0], [96900.0, 1.0], [100100.0, 1.0], [101700.0, 1.0], [104900.0, 3.0], [105700.0, 1.0], [108900.0, 2.0], [109700.0, 1.0], [108100.0, 1.0], [110500.0, 1.0], [111300.0, 1.0], [112900.0, 1.0], [112100.0, 1.0], [113700.0, 2.0], [114500.0, 1.0], [117700.0, 1.0], [115300.0, 1.0], [121700.0, 2.0], [120900.0, 1.0], [120100.0, 1.0], [123300.0, 2.0], [128100.0, 1.0], [129700.0, 1.0], [130500.0, 2.0], [137400.0, 2.0], [143800.0, 1.0], [140600.0, 1.0], [153400.0, 1.0], [161400.0, 1.0], [139900.0, 3.0], [56400.0, 1.0], [61600.0, 1.0], [62400.0, 1.0], [65600.0, 1.0], [73600.0, 1.0], [74400.0, 1.0], [76800.0, 1.0], [76000.0, 1.0], [75200.0, 1.0], [80800.0, 2.0], [83200.0, 1.0], [88000.0, 1.0], [93600.0, 2.0], [91200.0, 2.0], [96000.0, 2.0], [96800.0, 1.0], [99200.0, 1.0], [98400.0, 1.0], [106400.0, 2.0], [103200.0, 1.0], [104000.0, 1.0], [104800.0, 1.0], [109600.0, 1.0], [107200.0, 1.0], [108800.0, 1.0], [112000.0, 2.0], [112800.0, 1.0], [116000.0, 1.0], [116800.0, 1.0], [120000.0, 1.0], [120800.0, 2.0], [121600.0, 1.0], [126400.0, 1.0], [123200.0, 1.0], [128000.0, 1.0], [127200.0, 1.0], [129600.0, 1.0], [132800.0, 1.0], [139200.0, 1.0], [142400.0, 1.0], [132100.0, 1.0], [135300.0, 2.0], [140100.0, 1.0], [146500.0, 1.0], [143300.0, 1.0], [144900.0, 2.0], [258500.0, 1.0], [70300.0, 2.0], [75100.0, 1.0], [75900.0, 2.0], [74300.0, 1.0], [84700.0, 1.0], [88700.0, 1.0], [91900.0, 1.0], [96700.0, 2.0], [95900.0, 1.0], [100700.0, 1.0], [102300.0, 1.0], [101500.0, 1.0], [103100.0, 1.0], [105500.0, 3.0], [107100.0, 1.0], [111100.0, 2.0], [112700.0, 1.0], [115900.0, 1.0], [119100.0, 2.0], [120700.0, 1.0], [122300.0, 1.0], [119900.0, 2.0], [126300.0, 1.0], [127900.0, 2.0], [128700.0, 1.0], [130300.0, 1.0], [133000.0, 1.0], [131400.0, 1.0], [134600.0, 1.0], [137800.0, 2.0], [147400.0, 1.0], [139400.0, 1.0], [184200.0, 1.0], [205000.0, 1.0], [132300.0, 1.0], [138700.0, 1.0], [140300.0, 2.0], [148300.0, 1.0], [197900.0, 1.0], [55900.0, 1.0], [58700.0, 1.0], [63100.0, 1.0], [69400.0, 2.0], [73400.0, 1.0], [74200.0, 2.0], [75000.0, 2.0], [75800.0, 1.0], [79000.0, 1.0], [84600.0, 2.0], [85400.0, 1.0], [87800.0, 1.0], [89400.0, 1.0], [91800.0, 1.0], [95000.0, 1.0], [100600.0, 1.0], [99000.0, 1.0], [102200.0, 1.0], [103800.0, 1.0], [105400.0, 2.0], [108600.0, 2.0], [109400.0, 2.0], [107800.0, 2.0], [107000.0, 1.0], [111800.0, 2.0], [111000.0, 2.0], [112600.0, 4.0], [113400.0, 1.0], [115000.0, 2.0], [116600.0, 1.0], [119000.0, 1.0], [121400.0, 1.0], [124600.0, 1.0], [123800.0, 2.0], [127000.0, 1.0], [129400.0, 1.0], [139600.0, 1.0], [150800.0, 1.0], [170000.0, 1.0], [179600.0, 1.0], [137300.0, 1.0], [162900.0, 1.0], [201300.0, 1.0], [66900.0, 1.0], [71700.0, 1.0], [70100.0, 1.0], [76500.0, 1.0], [78900.0, 1.0], [79700.0, 1.0], [83700.0, 1.0], [88500.0, 1.0], [89300.0, 1.0], [87700.0, 1.0], [91700.0, 1.0], [94100.0, 2.0], [90900.0, 1.0], [95700.0, 1.0], [97300.0, 1.0], [98100.0, 1.0], [100500.0, 1.0], [98900.0, 1.0], [101300.0, 2.0], [104500.0, 3.0], [102900.0, 2.0], [105300.0, 1.0], [107700.0, 2.0], [109300.0, 2.0], [108500.0, 2.0], [106900.0, 2.0], [110100.0, 1.0], [114100.0, 2.0], [112500.0, 1.0], [115700.0, 2.0], [118100.0, 2.0], [114900.0, 1.0], [116500.0, 1.0], [120500.0, 1.0], [122100.0, 1.0], [119700.0, 2.0], [121300.0, 1.0], [124500.0, 1.0], [125300.0, 1.0], [122900.0, 1.0], [128500.0, 2.0], [127700.0, 1.0], [131800.0, 1.0], [133400.0, 1.0], [143000.0, 1.0], [139800.0, 1.0], [141400.0, 1.0], [157400.0, 1.0], [159000.0, 1.0], [139100.0, 1.0], [132700.0, 1.0], [134300.0, 1.0], [137500.0, 1.0], [140700.0, 1.0], [45400.0, 1.0], [51800.0, 1.0], [61000.0, 1.0], [64200.0, 1.0], [65400.0, 1.0], [67600.0, 1.0], [77200.0, 1.0], [76400.0, 1.0], [310200.0, 1.0], [81200.0, 1.0], [78800.0, 1.0], [90000.0, 1.0], [88400.0, 2.0], [91600.0, 1.0], [98000.0, 1.0], [94800.0, 1.0], [100400.0, 2.0], [98800.0, 1.0], [101200.0, 2.0], [106000.0, 2.0], [104400.0, 1.0], [110000.0, 1.0], [111600.0, 2.0], [112400.0, 1.0], [116400.0, 1.0], [118000.0, 1.0], [114800.0, 1.0], [120400.0, 2.0], [119600.0, 1.0], [122000.0, 1.0], [122800.0, 2.0], [123600.0, 1.0], [126000.0, 1.0], [124400.0, 1.0], [127600.0, 1.0], [130000.0, 1.0], [129200.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 310200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 64.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 386.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 386.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 64.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71537642E12, "maxY": 96.5, "series": [{"data": [[1.71537726E12, 1.0], [1.7153766E12, 19.5], [1.7153769E12, 5.0], [1.71537786E12, 4.0], [1.7153772E12, 2.5], [1.71537654E12, 49.5], [1.7153775E12, 36.01449275362319], [1.71537684E12, 39.0], [1.7153778E12, 50.0], [1.71537714E12, 39.52777777777778], [1.71537744E12, 80.55], [1.71537774E12, 96.5], [1.71537708E12, 78.0], [1.71537642E12, 25.52], [1.71537768E12, 1.0], [1.71537702E12, 1.0], [1.71537696E12, 2.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71537786E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 74298.0, "minX": 1.0, "maxY": 203976.66666666666, "series": [{"data": [[2.0, 156439.5], [3.0, 142530.16666666666], [4.0, 138296.0], [5.0, 135444.5], [6.0, 129529.66666666667], [7.0, 125135.0], [8.0, 121867.83333333333], [9.0, 119965.16666666666], [10.0, 120163.83333333333], [11.0, 119010.5], [12.0, 117625.5], [13.0, 118270.0], [14.0, 117233.33333333334], [15.0, 117097.0], [16.0, 116857.5], [17.0, 115911.33333333334], [18.0, 116374.5], [19.0, 115453.0], [20.0, 115964.0], [21.0, 115075.66666666667], [22.0, 115853.66666666666], [23.0, 115212.16666666666], [24.0, 115742.0], [25.0, 113370.66666666667], [26.0, 113731.0], [27.0, 113741.0], [28.0, 113307.33333333334], [29.0, 112968.83333333333], [30.0, 111744.5], [31.0, 111467.16666666667], [33.0, 111080.5], [32.0, 112034.0], [35.0, 109405.66666666667], [34.0, 109063.33333333333], [37.0, 102573.42857142857], [36.0, 117629.0], [39.0, 107442.5], [38.0, 109797.66666666667], [41.0, 105907.6], [40.0, 107157.33333333334], [43.0, 106947.66666666666], [42.0, 107442.42857142857], [45.0, 105650.66666666667], [44.0, 105677.16666666667], [47.0, 102803.16666666666], [46.0, 103190.0], [49.0, 106972.71428571429], [48.0, 97568.0], [50.0, 99462.5], [51.0, 108976.4], [53.0, 110541.5], [52.0, 109832.8], [55.0, 108151.0], [54.0, 108165.83333333333], [57.0, 106644.2], [56.0, 106130.2], [59.0, 103499.2], [58.0, 105427.8], [60.0, 100748.6], [61.0, 112448.25], [63.0, 109037.75], [62.0, 110279.75], [67.0, 105642.5], [66.0, 104842.5], [65.0, 107198.75], [64.0, 106831.25], [70.0, 101498.0], [69.0, 102971.25], [68.0, 103484.0], [71.0, 108662.33333333333], [75.0, 106035.66666666667], [74.0, 107621.66666666667], [73.0, 107707.33333333333], [72.0, 107475.33333333333], [79.0, 100928.66666666667], [78.0, 99678.0], [77.0, 101459.33333333333], [76.0, 103170.0], [80.0, 91746.0], [83.0, 109992.0], [81.0, 109670.5], [82.0, 114154.0], [87.0, 99890.0], [86.0, 100663.5], [85.0, 109039.5], [84.0, 108184.5], [90.0, 88474.5], [89.0, 96634.0], [88.0, 98884.5], [91.0, 102769.0], [95.0, 93629.0], [94.0, 96024.0], [93.0, 95417.0], [92.0, 101238.0], [99.0, 79017.0], [98.0, 88903.0], [97.0, 90923.0], [96.0, 94884.0], [100.0, 74298.0], [1.0, 203976.66666666666]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[39.95555555555552, 112750.18888888884]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.71537642E12, "maxY": 1308910.2, "series": [{"data": [[1.71537726E12, 21.666666666666668], [1.7153766E12, 673575.2], [1.7153769E12, 108.36666666666666], [1.71537786E12, 19412.766666666666], [1.7153772E12, 19264.916666666668], [1.71537654E12, 423352.4], [1.7153775E12, 1116654.9833333334], [1.71537684E12, 1116208.8833333333], [1.7153778E12, 1308910.2], [1.71537714E12, 1289409.3333333333], [1.71537744E12, 346535.15], [1.71537774E12, 77060.86666666667], [1.71537708E12, 76998.8], [1.71537642E12, 962154.6833333333], [1.71537768E12, 42.8], [1.71537702E12, 55.36666666666667], [1.71537696E12, 41.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71537726E12, 0.0], [1.7153766E12, 68.83333333333333], [1.7153769E12, 0.0], [1.71537786E12, 1.9666666666666666], [1.7153772E12, 1.9666666666666666], [1.71537654E12, 43.266666666666666], [1.7153775E12, 114.06666666666666], [1.71537684E12, 114.06666666666666], [1.7153778E12, 133.73333333333332], [1.71537714E12, 131.76666666666668], [1.71537744E12, 35.4], [1.71537774E12, 7.866666666666666], [1.71537708E12, 7.866666666666666], [1.71537642E12, 98.33333333333333], [1.71537768E12, 0.0], [1.71537702E12, 0.0], [1.71537696E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71537786E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 70392.35999999999, "minX": 1.71537642E12, "maxY": 310296.0, "series": [{"data": [[1.71537726E12, 236948.0], [1.7153766E12, 108049.07894736841], [1.7153769E12, 136229.4], [1.71537786E12, 187572.7142857143], [1.7153772E12, 154921.5], [1.71537654E12, 87730.81818181815], [1.7153775E12, 136497.9130434783], [1.71537684E12, 102449.20634920636], [1.7153778E12, 125454.4470588235], [1.71537714E12, 113021.65277777778], [1.71537744E12, 105705.5], [1.71537774E12, 89136.87499999999], [1.71537708E12, 73968.0], [1.71537642E12, 70392.35999999999], [1.71537768E12, 310296.0], [1.71537702E12, 258521.0], [1.71537696E12, 201372.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71537786E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71537642E12, "maxY": 3731.9999999999995, "series": [{"data": [[1.71537726E12, 3682.0], [1.7153766E12, 1542.815789473684], [1.7153769E12, 1248.8], [1.71537786E12, 3731.9999999999995], [1.7153772E12, 2915.5], [1.71537654E12, 1712.409090909091], [1.7153775E12, 2020.5942028985507], [1.71537684E12, 2784.8412698412703], [1.7153778E12, 2790.0823529411764], [1.71537714E12, 3014.527777777777], [1.71537744E12, 2041.3999999999996], [1.71537774E12, 1268.875], [1.71537708E12, 688.4], [1.71537642E12, 2164.48], [1.71537768E12, 1101.0], [1.71537702E12, 0.0], [1.71537696E12, 504.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71537786E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 370.0, "minX": 1.71537642E12, "maxY": 258521.0, "series": [{"data": [[1.71537726E12, 3551.0], [1.7153766E12, 1329.4473684210525], [1.7153769E12, 1102.8], [1.71537786E12, 3507.5714285714284], [1.7153772E12, 2769.0], [1.71537654E12, 1389.4545454545455], [1.7153775E12, 1715.391304347826], [1.71537684E12, 2552.555555555555], [1.7153778E12, 2452.0], [1.71537714E12, 2613.4305555555557], [1.71537744E12, 1783.75], [1.71537774E12, 1145.375], [1.71537708E12, 570.2], [1.71537642E12, 1886.2799999999997], [1.71537768E12, 566.0], [1.71537702E12, 258521.0], [1.71537696E12, 370.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71537786E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45458.0, "minX": 1.71537642E12, "maxY": 184291.0, "series": [{"data": [[1.71537774E12, 96024.0], [1.7153766E12, 128077.0], [1.71537708E12, 83743.0], [1.71537642E12, 84937.0], [1.71537786E12, 184291.0], [1.7153772E12, 148382.0], [1.71537654E12, 98023.0], [1.7153775E12, 144991.0], [1.71537684E12, 116080.0], [1.7153778E12, 144557.0], [1.71537714E12, 136837.0], [1.71537744E12, 118752.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71537774E12, 88903.0], [1.7153766E12, 96839.0], [1.71537708E12, 51854.0], [1.71537642E12, 45458.0], [1.71537786E12, 184291.0], [1.7153772E12, 148382.0], [1.71537654E12, 61031.0], [1.7153775E12, 118182.0], [1.71537684E12, 78896.0], [1.7153778E12, 101238.0], [1.71537714E12, 87580.0], [1.71537744E12, 91349.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71537774E12, 96024.0], [1.7153766E12, 118459.2], [1.71537708E12, 83743.0], [1.71537642E12, 76788.9], [1.71537786E12, 184291.0], [1.7153772E12, 148382.0], [1.71537654E12, 96725.3], [1.7153775E12, 143318.0], [1.71537684E12, 113042.8], [1.7153778E12, 139422.1], [1.71537714E12, 126117.0], [1.71537744E12, 118218.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71537774E12, 96024.0], [1.7153766E12, 128077.0], [1.71537708E12, 83743.0], [1.71537642E12, 84937.0], [1.71537786E12, 184291.0], [1.7153772E12, 148382.0], [1.71537654E12, 98023.0], [1.7153775E12, 144991.0], [1.71537684E12, 116080.0], [1.7153778E12, 144557.0], [1.71537714E12, 136837.0], [1.71537744E12, 118752.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71537774E12, 95150.5], [1.7153766E12, 105400.0], [1.71537708E12, 78924.0], [1.71537642E12, 71978.5], [1.71537786E12, 184291.0], [1.7153772E12, 148382.0], [1.71537654E12, 88649.0], [1.7153775E12, 135434.5], [1.71537684E12, 103687.0], [1.7153778E12, 123829.0], [1.71537714E12, 114551.0], [1.71537744E12, 108862.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71537774E12, 96024.0], [1.7153766E12, 121618.59999999996], [1.71537708E12, 83743.0], [1.71537642E12, 78000.04999999999], [1.71537786E12, 184291.0], [1.7153772E12, 148382.0], [1.71537654E12, 97829.65], [1.7153775E12, 144167.05], [1.71537684E12, 115049.59999999999], [1.7153778E12, 140096.4], [1.71537714E12, 128320.59999999999], [1.71537744E12, 118752.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71537786E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 77104.0, "minX": 1.0, "maxY": 147319.0, "series": [{"data": [[1.0, 96024.0], [2.0, 111045.0], [4.0, 119284.5], [5.0, 77104.0], [6.0, 123041.5], [3.0, 110367.0], [7.0, 121819.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 147319.0], [2.0, 127150.0], [4.0, 121410.5], [5.0, 124393.5], [3.0, 122880.0], [7.0, 121934.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 598.5, "minX": 1.0, "maxY": 3470.0, "series": [{"data": [[1.0, 1076.0], [2.0, 961.0], [4.0, 1305.0], [5.0, 1125.5], [6.0, 1434.0], [3.0, 1539.5], [7.0, 1459.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 915.0], [2.0, 1415.5], [4.0, 3470.0], [5.0, 876.0], [3.0, 1545.0], [7.0, 598.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.71537636E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.71537678E12, 1.1666666666666667], [1.71537738E12, 0.9666666666666667], [1.71537768E12, 1.6666666666666667], [1.71537702E12, 1.3333333333333333], [1.71537636E12, 0.8333333333333334], [1.71537732E12, 0.5333333333333333], [1.71537648E12, 1.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71537768E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71537642E12, "maxY": 1.1333333333333333, "series": [{"data": [[1.71537774E12, 0.06666666666666667], [1.7153766E12, 0.5833333333333334], [1.71537708E12, 0.06666666666666667], [1.71537642E12, 0.8333333333333334], [1.71537786E12, 0.016666666666666666], [1.7153772E12, 0.016666666666666666], [1.71537654E12, 0.36666666666666664], [1.7153775E12, 0.9666666666666667], [1.71537684E12, 0.9666666666666667], [1.7153778E12, 1.1333333333333333], [1.71537714E12, 1.1166666666666667], [1.71537744E12, 0.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71537726E12, 0.016666666666666666], [1.71537774E12, 0.06666666666666667], [1.7153766E12, 0.05], [1.71537708E12, 0.016666666666666666], [1.7153769E12, 0.08333333333333333], [1.71537786E12, 0.06666666666666667], [1.7153772E12, 0.016666666666666666], [1.7153775E12, 0.18333333333333332], [1.71537684E12, 0.08333333333333333], [1.7153778E12, 0.2833333333333333], [1.71537714E12, 0.08333333333333333], [1.71537744E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.71537786E12, 0.03333333333333333], [1.71537768E12, 0.016666666666666666], [1.71537702E12, 0.016666666666666666], [1.71537696E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71537786E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71537642E12, "maxY": 1.1333333333333333, "series": [{"data": [[1.71537774E12, 0.06666666666666667], [1.7153766E12, 0.5833333333333334], [1.71537708E12, 0.06666666666666667], [1.71537642E12, 0.8333333333333334], [1.71537786E12, 0.016666666666666666], [1.7153772E12, 0.016666666666666666], [1.71537654E12, 0.36666666666666664], [1.7153775E12, 0.9666666666666667], [1.71537684E12, 0.9666666666666667], [1.7153778E12, 1.1333333333333333], [1.71537714E12, 1.1166666666666667], [1.71537744E12, 0.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71537726E12, 0.016666666666666666], [1.7153766E12, 0.05], [1.7153769E12, 0.08333333333333333], [1.71537786E12, 0.1], [1.7153772E12, 0.016666666666666666], [1.7153775E12, 0.18333333333333332], [1.71537684E12, 0.08333333333333333], [1.7153778E12, 0.2833333333333333], [1.71537714E12, 0.08333333333333333], [1.71537744E12, 0.03333333333333333], [1.71537774E12, 0.06666666666666667], [1.71537708E12, 0.016666666666666666], [1.71537768E12, 0.016666666666666666], [1.71537702E12, 0.016666666666666666], [1.71537696E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71537786E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71537642E12, "maxY": 1.1333333333333333, "series": [{"data": [[1.71537774E12, 0.06666666666666667], [1.7153766E12, 0.5833333333333334], [1.71537708E12, 0.06666666666666667], [1.71537642E12, 0.8333333333333334], [1.71537786E12, 0.016666666666666666], [1.7153772E12, 0.016666666666666666], [1.71537654E12, 0.36666666666666664], [1.7153775E12, 0.9666666666666667], [1.71537684E12, 0.9666666666666667], [1.7153778E12, 1.1333333333333333], [1.71537714E12, 1.1166666666666667], [1.71537744E12, 0.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71537726E12, 0.016666666666666666], [1.7153766E12, 0.05], [1.7153769E12, 0.08333333333333333], [1.71537786E12, 0.1], [1.7153772E12, 0.016666666666666666], [1.7153775E12, 0.18333333333333332], [1.71537684E12, 0.08333333333333333], [1.7153778E12, 0.2833333333333333], [1.71537714E12, 0.08333333333333333], [1.71537744E12, 0.03333333333333333], [1.71537774E12, 0.06666666666666667], [1.71537708E12, 0.016666666666666666], [1.71537768E12, 0.016666666666666666], [1.71537702E12, 0.016666666666666666], [1.71537696E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71537786E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

